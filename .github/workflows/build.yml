name: Build

on: [push, pull_request]

jobs:
  Build-Ubuntu:
    runs-on: ubuntu-latest
    env:
      BUILD_TAG:
    steps:
      - name: Clone Tree
        uses: actions/checkout@v1
        with:
          fetch-depth: 1

      - name: Build
        run: |
          export BUILD_TAG=build-$(date -u +'%Y%m%d%H%M')
          echo "BUILD_TAG=$BUILD_TAG" >> $GITHUB_ENV
          mkdir -p dist
          echo -n $BUILD_TAG > dist/tag
          RUNTESTS=1 ./build.sh

      - name: Upload Artifacts
        uses: actions/upload-artifact@master
        with:
          name: dist
          path: dist

  Test-Windows:
    runs-on: windows-latest
    needs: Build-Ubuntu
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v1
        with:
          name: dist

      - uses: actions/setup-java@v1
        with:
          java-version: "11.0.x"
          java-package: jdk
          architecture: x64

      - name: Install Ghidra
        run: |
          Invoke-WebRequest -Uri "https://ghidra-sre.org/ghidra_9.2.2_PUBLIC_20201229.zip" -OutFile "ghidra.zip"
          Expand-Archive -path ghidra.zip -destinationpath .

      - name: Install Extension
        run: |
          Expand-Archive -path dist\*ghidra-xbe.zip -destinationpath ghidra_9.2.2_PUBLIC\Ghidra\Extensions

      - name: Run Tests
        run: |
          ghidra_9.2.2_PUBLIC\support\analyzeHeadless . test_project `
            -import ghidra_9.2.2_PUBLIC\Ghidra\Extensions\ghidra-xbe\tests\xbefiles\triangle.xbe `
            -postScript ghidra_9.2.2_PUBLIC\Ghidra\Extensions\ghidra-xbe\tests\test_load.py

  Test-macOS:
    runs-on: macos-latest
    needs: Build-Ubuntu
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v1
        with:
          name: dist

      - uses: actions/setup-java@v1
        with:
          java-version: "11.0.x"
          java-package: jdk
          architecture: x64

      - name: Install Ghidra
        run: |
          wget --quiet -O ghidra.zip "https://ghidra-sre.org/ghidra_9.2.2_PUBLIC_20201229.zip"
          unzip ghidra.zip

      - name: Install Extension
        run: |
          unzip dist/*ghidra-xbe.zip -d ghidra_9.2.2_PUBLIC/Ghidra/Extensions

      - name: Run Tests
        run: |
          ghidra_9.2.2_PUBLIC/support/analyzeHeadless . test_project \
            -import ghidra_9.2.2_PUBLIC/Ghidra/Extensions/ghidra-xbe/tests/xbefiles/triangle.xbe \
            -postScript ghidra_9.2.2_PUBLIC/Ghidra/Extensions/ghidra-xbe/tests/test_load.py

  Create-Release:
    runs-on: ubuntu-latest
    needs: [Build-Ubuntu, Test-Windows, Test-macOS]
    env:
      BUILD_TAG:
      PKG_NAME:
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v1
        with:
          name: dist

      - name: Get Package Info
        run: |
          echo "BUILD_TAG=$(cat dist/tag)" >> $GITHUB_ENV
          echo "PKG_NAME=$(cd dist; ls *ghidra-xbe.zip)" >> $GITHUB_ENV

      - name: Create Release
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.BUILD_TAG }}
          release_name: ${{ env.BUILD_TAG }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        id: upload-release-asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_name: ${{ env.PKG_NAME }}
          asset_path: dist/${{ env.PKG_NAME }}
          asset_content_type: application/zip
